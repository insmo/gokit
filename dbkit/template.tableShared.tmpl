// {{ .GoTableName }}Table is generated by dbkit
type {{ .GoTableName }}Table struct {
	driver {{ .GoLowerTableName }}Driver
}

// Execute runs a raw comand against the database
func (t {{ .GoTableName }}Table) Execute(ctx context.Context, command string, args ...interface{}) error{
	return t.driver.execute(ctx, command, args...)
}

// Insert creates a record in the {{ .GoTableName }} table
func (t {{ .GoTableName }}Table) Insert(ctx context.Context, {{range $i, $c := .NonAutoIDColumns}}{{if $i}}, {{end}}{{$c.GoLowerName}} {{$c.GoType}}{{end}}) (*{{ .StructName }}, error) {
	return t.driver.insert(ctx, {{range $i, $c := .NonAutoIDColumns}}{{if $i}}, {{end}}{{$c.GoLowerName}}{{end}})
}

// Load a single record from the {{ .GoTableName }} table based on the given query
func (t {{ .GoTableName }}Table) Load(ctx context.Context, query string, args ...interface{}) (*{{ .StructName }}, error) {
	return t.driver.load(ctx, query, args...)
}

// Delete deletes records from the {{ .GoTableName }} table based on the given query
func (t {{ .GoTableName }}Table) Delete(ctx context.Context, query string, args ...interface{}) error {
	return t.driver.delete(ctx, query, args...)
}
{{ range .IndexCombinations }}
// LoadBy{{.Name}} loads a single record from the {{ .Table.GoTableName }} table based on the given values
func (t {{ .Table.GoTableName }}Table) LoadBy{{.Name}}(ctx context.Context, {{.FuncArgs}}) (*{{ .Table.StructName }}, error) {
	return t.driver.loadBy{{.Name}}(ctx, {{.CallArgs}})
}

// FindBy{{.Name}} finds records the {{ .Table.GoTableName }} table based on the given values
func (t {{ .Table.GoTableName }}Table) FindBy{{.Name}}({{.FuncArgs}}) *{{ .Table.StructName }}Query {
	return t.driver.findBy{{.Name}}({{.CallArgs}})
}

// DeleteBy{{.Name}} deletes records the {{ .Table.GoTableName }} table based on the given values
func (t {{ .Table.GoTableName }}Table) DeleteBy{{.Name}}(ctx context.Context, {{.FuncArgs}}) error {
	return t.driver.deleteBy{{.Name}}(ctx,{{.CallArgs}})
}
{{end}}
// Query creates a query for records in the {{ .GoTableName }} table by id
func (t {{ .GoTableName }}Table) Query() *{{ .StructName }}Query {
	return &{{ .StructName }}Query{driver: t.driver}
}

// {{.StructName}} represents a row in the {{ .GoTableName }} table
type {{ .StructName }} struct {
	driver {{ .GoLowerTableName }}Driver
	{{ range .Columns }}{{.GoName}}      {{.GoType}}
	{{ end }}
	{{ range .Columns }}load{{.GoName}}      {{.GoType}}
	{{ end }}
}

// Save saves any changes to the row
func (i *{{ .StructName }}) Save(ctx context.Context) error {
	return i.driver.save(ctx,i)
}

// {{ .StructName }}Query is a modifiable query against the {{.GoTableName}} table
type {{ .StructName }}Query struct {
	driver {{ .GoLowerTableName }}Driver

	whereQuery string
	orderColumns []string
	orderDirection []int
	args       []interface{}
	limit      int
}

// Limit changes the limit of the {{ .StructName }}Query query to the given value
func (q *{{ .StructName }}Query) Limit(limit int) *{{ .StructName }}Query {
	q.limit = limit
	return q
}

// SortAscendingBy adds an ascending sort column to the query
func (q *{{ .StructName }}Query) SortAscendingBy(column string) *{{ .StructName }}Query {
	q.orderColumns = append(q.orderColumns, column)
	q.orderDirection = append(q.orderDirection, 1)
	return q
}

// SortDescendingBy adds an descending sort column to the query
func (q *{{ .StructName }}Query) SortDescendingBy(column string) *{{ .StructName }}Query {
	q.orderColumns = append(q.orderColumns, column)
	q.orderDirection = append(q.orderDirection, -1)
	return q
}

// Where changes the where clause of the query
func (q *{{ .StructName }}Query) Where(where string, args ...interface{}) *{{ .StructName }}Query {
	q.whereQuery = where
	q.args = args //TODO: check if already have args, then add instead of set.
	return q
}

// First returns the first item found by the query
func (q *{{ .StructName }}Query) First(ctx context.Context) ( *{{ .StructName }}, error) {
	return q.driver.queryFirst(ctx,q)
}

// Slice returns a slice with all the matched item (warning: can use lots of memory)
func (q *{{ .StructName }}Query) Slice(ctx context.Context,expectedSliceSize int) ([]*{{ .StructName }}, error) {
	return q.driver.querySlice(ctx,q, expectedSliceSize)
}

// Each returns a slice with all the matched item (warning: can use lots of memory)
func (q *{{ .StructName }}Query) Each(ctx context.Context, reuseItem bool, action func(*{{ .StructName }}) error) error {
	return q.driver.queryEach(ctx, q, reuseItem, action)
}

type {{ .GoLowerTableName }}Driver interface {
	execute(ctx context.Context,query string, args ...interface{}) error
	insert(ctx context.Context,{{range $i, $c := .NonAutoIDColumns}}{{if $i}}, {{end}}{{$c.GoLowerName}} {{$c.GoType}}{{end}}) (*{{ .StructName }}, error)
	load(ctx context.Context,query string, args ...interface{}) (*{{ .StructName }}, error)
	delete(ctx context.Context,query string, args ...interface{}) error
	save(ctx context.Context,{{ .LowerStructName }} *{{ .StructName }}) error
	//scan({{ .LowerStructName }} *{{ .StructName }}, rows *sql.Rows) error
	queryFirst(ctx context.Context,query *{{ .StructName }}Query) (*{{ .StructName }}, error)
	querySlice(ctx context.Context,query *{{ .StructName }}Query, expectedSliceSize int) ([]*{{ .StructName }}, error)
	queryEach(ctx context.Context,query *{{ .StructName }}Query, reuseItem bool, action func(*{{ .StructName }}) error) error{{ range .IndexCombinations }}
	loadBy{{.Name}}(ctx context.Context,{{.FuncArgs}}) (*{{.Table.StructName}}, error)
	findBy{{.Name}}({{.FuncArgs}}) *{{.Table.StructName}}Query
	deleteBy{{.Name}}(ctx context.Context,{{.FuncArgs}}) error{{end}}
}
