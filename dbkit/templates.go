// Code generated by go-bindata.
// sources:
// template.db.tmpl
// template.loader.tmpl
// template.postgres.tmpl
// template.postgres.db.tmpl
// template.tableShared.tmpl
// template.cassandra.tmpl
// template.cassandra.db.tmpl
// DO NOT EDIT!

package dbkit

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templateDbTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x55\x4d\x6f\xe3\x36\x10\x3d\x93\xbf\x62\x6a\x04\x0b\x29\x35\xb8\xe8\xd5\x80\x0f\xb1\xd5\xa6\x46\x83\xd4\xad\x17\xbd\x14\x3d\xd0\xd4\x58\x26\x22\x93\x0a\x3f\xd6\x31\x08\xfd\xf7\x82\xa4\x25\x3b\x49\xbb\x6d\x51\xec\xc9\xe6\xf0\x0d\xe7\xcd\x9b\x0f\x75\x5c\x3c\xf1\x06\x21\x04\xb6\x11\x7b\x3c\x70\xb6\xce\x96\x47\x7e\xc0\xbe\xa7\x34\x04\xb6\x3a\x74\xda\x38\x1b\x4f\x1f\x3f\x42\xb5\x00\x69\xc1\xed\x11\x0e\x5c\x2a\xe0\x42\xa0\xb5\xd0\x69\xa9\x1c\x38\x9d\x2e\x6a\xee\xf8\x96\x5b\xa4\xee\xd4\x61\x74\xb0\xce\x78\xe1\x20\x50\xa2\xf0\xb8\xe0\x4e\xec\x61\xe7\x95\x28\x4a\x48\x07\x1a\x82\xe1\xaa\x41\x18\x38\x7c\xe2\xdb\x16\x6d\xdf\x93\x10\xd8\xbd\x4e\xa7\xcc\x07\xde\x1a\xd2\x5f\x1a\x02\xaa\xba\x3f\x13\x7c\xc4\x63\xb5\x00\x61\x90\x3b\xb4\xc0\x41\xe1\x31\x72\x48\x0c\xd1\x44\x8e\x67\xce\xfc\x42\x34\xb2\xc9\x8e\x45\x6d\xe4\x67\x34\xf1\xf5\x69\xba\xdf\x68\x6f\x44\x8a\x16\xd3\x90\xaa\x29\xa1\xb8\xad\x16\x53\x40\x63\xb4\x29\x63\x52\xf6\x28\x9d\xd8\x5f\x79\x96\x81\x92\x21\xa7\x9b\x06\x15\x1a\xee\xb4\x81\xd9\x1c\xd8\xfd\x70\xb2\xd0\xf7\x94\x90\x10\x40\xee\xa0\xc0\xe7\x6b\xe0\x44\x70\x6b\xb9\xaa\x0d\x9f\x94\xd0\xf7\x40\x09\x11\xdc\xe2\xb5\x7d\x46\x09\x21\x3e\xb1\x88\xef\x7a\xd3\xb2\x35\x37\x16\x8b\xd7\x9c\xcb\x08\x93\xbb\x04\xfb\x66\x0e\x4a\xb6\x91\x30\x21\xc4\xa0\xf3\x46\x45\x43\x7a\x23\xda\x22\x1d\x22\x5a\x6f\xa3\x4c\xb3\x39\x34\x5a\x3c\xb7\xec\x11\x8f\xcb\x6c\x2b\x3c\xfb\x51\x5b\x37\x3c\xe9\xd9\x2f\x1e\xcd\xa9\x28\xd9\x3d\xba\x62\x52\x49\x1b\x6b\xb1\x52\xd2\x49\xde\x46\xe0\x83\xd6\x4f\xbe\x9b\x94\x30\x9f\xc3\xc4\x19\x8f\x93\x73\xec\x73\x0c\xf6\x77\x2e\x30\x87\x08\x1f\x39\xbd\x0f\xb6\x6a\x94\x36\xb8\x46\x34\x77\x75\x6d\xbe\x10\xe2\x35\xf0\xed\xc3\x03\xea\x27\x3c\xd9\x8e\x0b\x84\x39\x78\xb6\xe6\x6e\xff\xfb\x77\xb3\x3f\x68\x44\xd4\xdb\x51\xe2\x01\xbc\x4c\x9d\xb5\x41\x6b\xa5\x56\xc5\x7f\x13\x98\x5e\x2e\x3e\x54\x8b\x0c\x1c\x46\x62\x76\x3d\x12\x61\x40\x8d\x15\xcf\xe6\x7a\x3b\x8b\x94\xc4\x73\x9b\x7d\x2e\x45\x4a\xe7\x22\x1f\x1f\x74\xd3\x60\x9d\x2c\x65\xdf\x4f\x63\x98\xb1\x1d\xff\x71\xc6\x66\x7f\x3d\x64\x21\xb7\xf7\x0c\x3e\xa4\xeb\x07\x7d\x44\x73\x85\x59\x0e\x3c\xab\x04\x8b\x44\xa1\xde\x8e\xc1\xf3\x7c\x4e\xa3\x1c\xa9\xe9\xb1\xb5\x98\xfa\x3f\xf7\x75\xa7\xad\x6b\x0c\xda\xdc\xd6\x57\xa2\xdb\xe7\x96\xfd\xdc\xa1\xfa\xc2\x58\xfe\xef\x0a\x7c\x6d\x69\xd6\xe7\xe4\xfe\x8d\x32\x83\x81\x5e\xfe\x90\x1a\x77\xdc\xb7\x6e\x46\xdf\xe7\xa4\x8d\x8d\xb5\x2f\x26\x5e\x3d\x29\x7d\x54\xe3\x46\x83\x81\xd2\x04\xbe\x85\xab\xc5\x44\xa3\x04\x3d\xcd\x9b\x39\x6f\xe2\xb4\x16\x77\xb1\xfb\x03\x25\x9b\xb4\xe2\x8a\xf2\xbc\xeb\x28\xf9\xfe\x05\x85\x77\x58\x08\xf7\x02\x42\x2b\x87\x2f\x8e\x2d\xf3\x6f\x99\x19\x5c\x56\xdd\x5b\xfd\x28\x59\x29\x8b\xc6\xc5\x8f\x4b\xfa\x02\x64\x3d\x8a\x51\x70\x39\x85\x1b\x91\xd6\xe2\xa3\x56\x77\xde\xe9\x55\xb5\xd4\xad\x3f\x28\xdb\xf7\x21\xc8\x1d\xdc\xc8\x28\xcd\x59\x8a\x10\x6e\xc4\x20\xef\xf8\x39\x48\xa6\x4f\xa7\x0e\xe3\x7d\x82\x95\x10\x02\x9c\x09\xad\x54\x8d\x2f\x4b\x7d\xd8\x4a\xc5\x9d\xd4\x2a\x2f\xdd\x0a\x5b\x74\x18\x42\x26\xfa\x8a\xdb\xe2\x14\x02\x1b\x69\xb2\x1f\xbc\x12\x77\xa6\xb1\x7d\x5f\x8e\xf5\xd8\xf0\xcf\xf8\x3e\x23\x96\x68\x5d\x1b\xe1\xf6\x0d\x6a\x7c\x22\x16\x20\x7d\x71\x8a\x7a\x0b\xb7\xd5\xa2\x84\x71\x7e\x87\xf1\xa7\x43\xa5\xeb\x2d\x53\xe3\xe5\x58\xb9\x56\xf3\xfa\x37\x6e\x7e\x45\x8b\x2e\xe6\x70\x29\x62\xf2\xb4\xe8\x1e\x32\xc2\x26\xa7\x3f\x03\x00\x00\xff\xff\xe3\x52\xad\x82\xe6\x07\x00\x00")

func templateDbTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateDbTmpl,
		"template.db.tmpl",
	)
}

func templateDbTmpl() (*asset, error) {
	bytes, err := templateDbTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.db.tmpl", size: 2022, mode: os.FileMode(420), modTime: time.Unix(1498479690, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateLoaderTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x5d\x6b\xdb\x3c\x14\xbe\xb6\x7e\xc5\x79\x7d\xf1\x62\x87\xa1\x6e\xb7\x85\x0c\xda\x8e\x84\xb1\xae\x0c\xd6\xed\x26\xe4\x42\xb6\x4e\x82\x89\x2c\x65\xb2\x9c\xc6\x08\xfd\xf7\x21\x2b\x5e\x13\x7f\xb0\xae\x63\x57\x89\xed\xa3\xe7\x3c\x1f\xe7\x68\x53\xcb\x1c\x12\x9e\xc1\xec\xc3\x6d\x0a\x0f\xf8\x74\xaf\x18\x47\x9d\xa4\x30\x0b\xff\xc0\x92\x48\xa3\xa9\xb5\x84\xff\xc3\x1b\xcb\xb3\x6b\xe0\x99\x23\x8e\x90\xab\x2b\x38\x95\x95\x6c\x87\x15\x14\x06\x90\x55\x0d\x18\x05\x42\x31\x0e\x65\x2d\x4c\xb1\x17\x08\x07\x26\x6a\xac\x60\xa3\x55\xf9\xfc\xd2\xb0\x4c\xf8\x43\x12\x94\x44\xd8\x2a\x62\x9a\x3d\x76\x80\x95\xd1\x75\x6e\x7c\xfb\xc0\x8e\x58\xab\x99\xdc\x22\xd0\xc7\xf6\x98\x73\x51\xc1\x2b\x6b\xe9\xd7\xb6\xf0\x81\x95\xe8\x1c\x94\x6c\xbf\xb2\x96\x7e\xd1\x45\xc9\x74\xf3\x51\x72\x3c\xd2\x00\xf8\x09\x9b\xa5\x7a\x6c\xf6\xe8\xdc\x3a\x53\x4a\x10\x6b\x51\x72\xe7\x86\xb0\x81\xeb\xeb\x90\x67\xbd\x63\x5d\x17\x37\xa4\x6f\x6d\xb1\x01\x89\x90\x08\x94\x70\x89\x7b\xa7\x44\x5d\xca\x2a\x85\x77\xce\x05\x53\x44\xd7\xa9\x4f\x2b\xd8\x64\x9f\xe1\xc7\x80\x9c\x8b\xac\xa5\x4b\x75\xaf\x9e\x50\x9f\x0e\xb6\xed\xf1\x07\xd0\xc0\x1d\xe2\xd5\x3a\x6b\x0c\xc6\xce\x55\x46\x17\x72\x6b\x2d\x8a\x0a\x3d\x4d\xda\xa9\x3b\x69\x81\x73\x51\x27\x0f\xc7\xad\x24\x61\xbc\x44\x37\x4c\x29\xdc\x70\xde\x53\x90\x58\x4b\x5b\x5e\x17\xb2\xfa\x3e\xa6\x7e\x10\x8a\x0d\x08\x3a\x9e\xce\x7c\x0e\xb2\x10\xbe\x28\x9a\x2c\x69\x67\x34\x79\x5d\x8e\x29\x89\x1c\x99\x82\x5e\x59\x9b\x4c\x00\x2e\xb4\x2a\x43\x29\xf4\x55\xa6\xce\xad\x61\x0e\x63\xf2\xfd\x6a\x0d\xac\xfb\xcc\xf4\xae\xd7\x78\xa1\xb4\xff\x9a\x4c\xea\x59\xd4\x32\xbf\xd1\xdb\xea\xdc\xc0\x91\xad\xb9\x70\x6f\xec\xfb\x9f\x58\xe7\x97\xab\xb3\x6b\x88\x35\x0d\xe0\xb9\x7e\xf7\xf6\x06\x5f\x8c\xae\x71\xd4\x87\x25\x9a\x91\x11\xfa\xbd\xfe\x7e\xa4\x67\x37\xdb\x74\xae\x2f\xe0\x4a\x7e\xad\xc1\x90\x6b\x9b\x4e\x6e\x8e\x90\x2b\x69\xf0\x68\xe8\x5d\xf8\x4d\x01\xb5\x56\x1a\x2c\x0c\x77\xa6\x4d\x09\x65\x32\xe6\x5e\xfa\xfe\x6d\x9b\xd2\xcb\x36\xe1\x9f\xad\x82\x0f\x37\xda\x28\x0d\x05\x87\xeb\x39\x04\x05\xa3\x93\xd3\xd2\x38\xbc\xf1\x72\x7d\xa5\xa0\x3c\xa3\xe1\x46\xf1\x72\x43\x51\xdb\xf3\xb6\x99\x64\xf2\x4d\xee\x59\xbe\x83\xb8\xe0\xb1\xb7\xa7\x55\xef\xf1\xfe\x3b\x53\xda\x25\x89\x5a\xfb\xc7\xae\xec\x70\x59\xf4\x57\xfb\x1b\x1f\xe2\xd3\xca\x1e\xba\x16\xce\x8f\x79\x17\x7e\x47\x41\x16\x82\x38\xf2\x33\x00\x00\xff\xff\x8a\x14\x99\x98\x59\x07\x00\x00")

func templateLoaderTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateLoaderTmpl,
		"template.loader.tmpl",
	)
}

func templateLoaderTmpl() (*asset, error) {
	bytes, err := templateLoaderTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.loader.tmpl", size: 1881, mode: os.FileMode(420), modTime: time.Unix(1498466633, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatePostgresTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x6b\x6f\xa3\xcc\x15\xfe\x0c\xbf\xe2\x2c\x8a\x22\x78\x8b\x48\x5e\xa9\xea\x87\xbc\x72\xa5\x4d\xec\xdd\x46\x4a\xf7\x12\x47\x5a\x55\xab\x55\x85\xe1\xd8\x19\x2d\x9e\xb1\x67\x86\x5c\x4a\xf8\xef\xd5\x99\x01\x8c\x6d\xc8\x3a\xce\x45\x6d\xd5\x7c\x89\x0d\x33\xe7\xf2\x9c\xe7\x3c\x73\xc0\xfa\x7e\x81\x50\x14\x10\x7d\x14\x17\xe2\x16\xe5\x55\x3c\xc9\xf0\x53\x3c\x47\x28\xcb\x2f\x42\xe9\x99\x44\x35\x94\xec\x06\x25\x28\x2d\xf3\x44\x43\xe1\x3a\xe9\x04\x7e\x53\xcb\x2c\x1a\x9e\xba\xa5\xeb\x4e\x73\x9e\x80\x9f\xc2\x6f\x3b\x99\x09\x80\x71\x85\x52\xfb\x89\xbe\x83\x44\x70\x8d\x77\x3a\x3a\xb3\xff\x43\x28\x0a\x19\xf3\x19\xc2\x01\x0b\xe1\x20\x81\x93\x01\x44\x9f\x04\x7f\x9f\x6b\x71\x3e\x3c\x13\x59\x3e\xe7\xaa\x2c\x8b\x82\x4d\xe1\x80\x95\x25\xad\x47\x9e\xd2\x95\x83\xa4\x76\x4d\x5e\xcb\x12\xaa\x4b\x57\xf7\x0b\xa4\xfb\x66\x59\x00\xbe\x09\x72\x6c\x32\xa9\xc2\x0b\x01\xa5\x14\x32\xa0\xc4\xd8\x14\x28\xac\xc1\x00\x38\xcb\xe8\x82\x63\xbe\x36\x71\x9e\xc6\xc9\xcf\x99\x14\x39\x4f\xfd\xc0\x75\x4a\xd7\x75\x8a\x02\xd8\x14\xa2\x76\x84\x50\x96\xae\xa3\x96\x19\x45\xef\xd9\x64\x81\x71\x2d\x0c\xcc\xc3\xd3\x36\x34\xfe\x73\xf2\x1d\x9e\xda\x54\x9b\xe4\x6e\xe2\x2c\x47\x05\xfb\x1a\x3d\x28\x8a\x03\x06\x0f\xb0\xc8\x72\x25\x78\xdb\xb0\x44\x9d\x4b\xce\xf8\x0c\x58\xea\xb9\x84\x49\x08\xa9\xe0\x48\xa6\x33\x31\xfb\xc9\x74\xf4\x79\x81\x32\xd6\x4c\x70\xaa\x6b\xe8\x2d\x66\x91\x5a\x66\x5e\x58\xdf\x1e\x6b\xc9\xf8\xcc\xf7\xcc\x45\xb5\xcc\x82\xc0\x75\x52\x9c\xa2\x34\x76\x08\xcc\x9b\x58\x02\xc7\xdb\xf3\x21\x61\xf5\x97\x3f\xbb\x0e\x4a\x49\xf6\xd3\x28\x9d\x44\x5f\x73\x94\xf7\x97\xe2\xb6\xe2\x89\xf1\xa1\x96\x59\x9d\x68\x47\x7a\x94\xd5\x3a\x23\xea\x6c\xa2\x71\x12\x73\xff\xd0\xf8\x0a\xa8\x80\x98\x29\xfc\x5f\x2b\xd9\x6b\x55\xe9\x9f\xa6\x5b\x9a\xba\x8c\xee\x30\x79\x89\x9a\x98\x32\xd0\x27\xd3\x82\xe4\xe1\xdd\xaa\x05\x2d\xfb\xe8\xab\x71\x6e\xfb\xae\xba\x78\xb8\xd5\xce\xb4\x23\x35\x4a\x73\x02\xe6\x2f\x0d\x5d\xa7\xb7\x4d\x9d\xa2\x58\xbb\x18\x7d\x14\x36\xb2\x13\x4b\x46\xda\x9b\x89\x38\xdd\x61\x59\x51\x00\xf2\xb4\xb6\x0a\x3d\x28\x50\x84\x45\x6b\xbb\xf9\xdb\x84\xe5\x49\xe6\xaa\xf0\x9e\x66\xb2\x0c\x09\xcf\x7d\xd4\x9b\xdc\x75\x6b\xf7\x92\x9a\x94\x4e\x09\xc6\x67\x21\xc4\x72\xa6\x20\x8a\x22\xc6\x35\xca\x69\x9c\x60\xf1\xf2\xf2\xdb\xb4\xec\x78\x74\x31\x3a\xbb\xea\x3a\x3d\x9e\xd8\x91\x30\x95\x62\xde\xd1\xf5\x70\x7b\x8d\x12\xc1\xfb\x93\x49\xf2\x95\x9a\x4b\x8a\x5b\xb5\xde\x5f\x46\xf7\x36\x1a\xcc\x42\x1b\x45\x51\xb0\x63\xb3\x54\x5e\xc8\x7a\x74\x96\x09\x45\xbe\xac\xde\x32\x8d\x73\xd8\x2e\x89\xb1\x6b\x96\x7f\x22\xbf\xa6\x34\x8e\x59\x3b\xe8\x6a\x38\x62\x68\x15\x88\x89\x5b\x91\xbe\xd2\xf2\xd0\x18\x09\xfe\xd8\x8c\x71\x3b\x48\x8a\x72\xd5\xfb\x27\x03\xeb\x7d\x24\xa5\xbf\xbd\xfb\x31\x39\xb0\x5e\xf7\x64\x76\x8a\x19\x6a\xdc\x9b\xdb\x86\xc6\xcf\x62\xb1\x0d\xa0\xa6\x60\x9b\x81\x6f\x43\xc0\x5d\xe4\x3d\xac\xc9\xf7\x47\x03\x3a\x15\x61\x0f\xb8\x1b\x9a\x74\x30\xd0\x32\xc7\x0e\x99\x97\xc4\xa1\x15\xba\x6d\x82\x98\x93\xfc\x69\x4d\x7f\x48\x1e\xa3\x6a\x38\xdc\x3c\x84\x7a\xdb\xa9\xee\x24\xb3\xd9\x9e\x2e\x30\x80\xd4\x6d\x29\xf3\x4a\x90\xcd\xa2\x0d\x55\x86\x01\x54\x8e\x9b\x4b\x6e\x5b\x8f\x57\xa4\xde\x0b\xca\xf8\xa6\x87\xb7\x3d\xf8\xb6\xf0\x24\x1d\x50\x13\x98\xdc\x6b\x54\xd1\x69\x3e\x9d\xa2\x74\x1d\x35\x89\xbe\x49\xa6\xb1\xa6\x4c\xbe\x48\x63\x8d\x5d\xba\xa8\x50\x83\x17\xb8\x8e\x69\x89\x93\x01\xcc\xe3\x9f\xe8\x7f\xff\xd1\xea\x8c\x10\x8e\x43\xb3\xb3\x46\xe8\x01\x32\xa4\xd3\x17\x02\xb7\x1b\x40\x53\x88\xa2\x48\xae\xe9\x46\x0a\x11\x78\x06\x3b\xaf\xfa\x4f\xd0\x7a\x34\xe1\x83\x15\x9e\x0c\xb9\x4f\xee\x03\x2a\xdc\xb1\x55\x98\xcd\x04\x42\x13\x24\x95\xd0\x46\x3a\x80\x78\xb1\x40\x9e\x9a\x8d\xe1\x56\x6d\x68\xed\xa6\x09\xd3\x91\xf6\xf6\xe0\xc0\xeb\x58\xa1\xb4\x4c\x04\xbf\x89\x3e\x08\x39\x8f\xf5\x39\xd7\xbe\x99\x64\xfd\x26\xbe\x20\x84\xdf\x8f\x03\xdb\xf3\xab\xda\xbb\xce\xd1\x11\x70\xa1\xaf\x69\xbe\xae\x72\x7e\xe7\xae\x27\x36\xa8\x13\x6b\xf1\xc4\xa9\xb6\x5a\x61\x48\xb2\x38\x57\xb8\x5d\xb9\x5a\x37\x82\x36\xd4\x5f\x24\x9b\xc7\xf2\xfe\x9c\xa7\x78\xb7\x86\xfb\x8e\xd8\x6c\x39\xd9\xc2\x66\x6f\x68\x36\x70\xc1\x3b\x4c\x72\x8d\x8d\x46\xaa\x49\x2d\x63\xc1\x6b\x69\x20\x9b\x42\x87\x0c\xfa\x6b\x27\x6f\xdf\xa1\xd4\x9c\x47\x47\x47\x20\x91\x7a\x83\xc8\x0a\x37\xb1\x64\xd4\x34\x2a\x7a\x31\xc5\x78\xae\x64\x98\x63\xe4\x03\x93\xaa\xe7\x41\xdc\x1e\x78\xdb\xca\x61\x26\x92\x5f\x0e\x72\x55\xb5\xd2\xc8\x98\x19\x7f\xbd\xf0\xcd\x87\x57\xaa\x59\xdf\xe0\x64\x6b\x66\x3c\x47\xff\x9f\x99\x5e\x65\x66\xb2\xf5\xcd\x58\xf2\xe8\xdc\xd4\x43\xa3\x10\xf0\x6e\x81\x89\xc6\xd4\x58\x18\xb3\x7f\x21\x3d\x75\x07\xe0\x7f\xff\xf1\x9f\xc4\xaf\xb7\x23\x98\x44\x95\x67\xba\x75\x8e\x76\xc1\x70\xdc\x81\x5b\xe0\x3a\x53\x21\xbb\x09\x78\xf2\x9a\x0c\xac\x43\x6e\x0e\x0d\xfb\xdd\x1e\x1b\xc1\xcb\x30\xb4\x36\xf9\x1c\x8e\x8e\xe2\xe4\x7a\x2f\x8a\x4a\xcc\x15\x9e\x13\x8e\x13\x21\xe8\x08\x48\x88\x49\x40\x41\x74\x88\x60\x50\x93\xb4\x99\xaf\xfe\x3b\xa9\xba\xbf\x0c\x76\xd2\x70\x6a\xd7\x57\x8f\x44\x0f\x0f\xf0\x6e\x05\xab\xe1\xd6\xe3\x4a\x49\x5c\xd8\x8f\xac\x35\x4f\xd7\xf6\xdb\x12\x9a\xfd\xbf\xde\xf9\x54\x06\x6f\x92\xf7\x59\xc2\x5a\xb3\xa5\xff\x20\xb6\x8f\xa4\x7d\x83\xfc\xf6\xa8\x36\xc6\x0c\x13\xfd\x8a\x6f\x4a\xbc\x6a\x86\xb2\x54\x33\xd3\xa7\x09\x95\xa0\xf2\x3c\x83\xd4\xd6\xf8\xf8\xed\x6f\xa3\xcb\x11\x74\xcd\xd4\x9b\x56\x1a\x45\xa1\xc9\xd1\xde\x14\x32\x45\x59\x05\x1f\xc0\x5f\xab\x41\x79\xcb\xc7\xe7\xcb\xe1\xe8\x12\x4e\xff\x61\xdd\x10\x4b\x59\x08\x89\x30\xcd\x69\xb1\xd8\x36\x57\x71\x73\x0a\xac\xb1\xdb\xfb\x68\x61\xc4\x70\xf3\x66\x22\xb2\xa0\x32\xd1\xb2\x3e\x64\x12\x0d\x05\xbf\xb3\x1f\xd4\x13\xbf\xf7\x58\x86\xf7\xe3\xb3\xca\x36\x66\x0a\x7b\x16\x0d\x47\xcd\xaa\x8a\xea\x65\xab\x00\x19\x9b\x33\xdd\x8f\xca\xc5\xf9\xdf\xcf\xaf\x3a\x91\xef\x1b\xd9\x5b\x66\x5b\xcf\x33\x0d\xdd\xdb\x03\x7a\xe9\xba\xab\x69\xd7\x3c\x6c\x9c\x89\xf9\x84\x71\x23\x70\xe6\x81\x63\xad\x2b\x0c\x8b\x76\x7d\x05\x79\x7a\x5f\x14\x91\x25\x64\xdf\x2f\x49\xd1\x87\x9c\x27\xef\xe5\x4c\xad\x7e\xf8\xb1\x2e\x7a\xc7\x8a\x2a\x87\x34\xaa\x5f\x72\x86\xde\x4e\x8d\x02\x31\x4f\x3b\x7b\x65\xd0\xf7\x82\xde\x33\x01\x9e\xc5\x59\x56\x05\xb8\xa5\x11\x3b\xa3\x31\x65\x7c\x0d\x8d\x8d\xc4\xfb\xf2\xb6\x4d\x59\xb8\xce\x12\x4e\x06\x87\x8f\x2d\x2a\xea\xd7\xe9\x69\xe9\x3a\xcb\xe8\x1b\x35\xa3\xff\x76\xc0\xd4\x55\x59\xee\x0f\x91\x7d\xb1\xf6\x54\xca\x34\x47\x78\x43\x8b\xd5\x1b\xc2\x37\x25\x46\x75\xeb\xdf\x01\x00\x00\xff\xff\xc3\x6c\x80\xfe\xab\x1d\x00\x00")

func templatePostgresTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatePostgresTmpl,
		"template.postgres.tmpl",
	)
}

func templatePostgresTmpl() (*asset, error) {
	bytes, err := templatePostgresTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.postgres.tmpl", size: 7595, mode: os.FileMode(420), modTime: time.Unix(1499326854, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatePostgresDbTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x91\x4f\x6a\xf3\x30\x10\xc5\xd7\x9f\x4f\x31\x04\x2f\xec\x10\x74\x80\x0f\xba\xc8\x9f\xb6\x04\x4a\x36\xc9\x05\x14\x65\xe2\x08\xec\x91\x91\x46\xad\xc3\xa0\xbb\x17\x3b\xa1\x6d\x5a\x1a\x43\x57\x03\x4f\x8f\x99\xdf\x7b\xe2\x73\x8b\xd0\xba\xc0\x95\xc7\xb0\xd0\x6c\x4e\x10\xd8\x47\xc3\x20\x59\xca\xb2\x63\x24\x03\xc5\x1e\xa6\x37\x96\x12\xb6\xec\x2d\x55\x45\xd9\x9b\x2d\x55\x92\xfd\x6b\x35\x59\x53\x4c\xc8\x31\xd8\xa6\xad\xb1\x41\x62\x3c\x4c\xca\x7b\x5b\x1e\x3b\x34\x91\xb1\x30\xdc\x81\x71\xc4\xd8\xb1\x5a\x5e\x66\x09\xe8\xbd\xf3\x30\xb2\x59\xc4\x6b\xaa\x10\x72\xb5\x35\x27\x6c\xb4\xda\xe9\x7d\x8d\x21\xa5\xdf\xc9\xf5\x2b\x8a\xa8\xed\x10\x72\xa3\x1b\x4c\xa9\x10\x51\x2f\xee\x0d\xfd\x57\x11\xa6\xdf\x5c\xe5\x1f\x43\xae\x29\xa0\xe7\x9f\x27\xaf\xe0\x76\x06\xb9\x81\xff\x0f\xa0\x36\x8e\xe6\x91\xdd\x7a\xb5\x74\x75\x6c\x28\xa4\x24\x62\x8f\x90\xdb\x94\x66\x20\x82\x74\xe8\x95\xdc\xa8\x67\x37\xd0\x5e\x39\xaf\xd2\xee\xdc\x62\xff\x3e\xd8\x46\x58\x45\xe0\x72\x5d\xad\xe9\x80\xdd\xd2\x35\x7b\x4b\x9a\xad\xa3\x00\x77\xaa\x5b\x61\x8d\xdc\x97\x37\x94\x7c\x93\x67\x71\x16\x51\x9f\x6d\x3e\x45\x32\x73\x5f\x85\x94\xca\x91\x1f\xfc\xc8\x35\x8c\xf7\x00\x00\x00\xff\xff\xc6\x5e\x7f\xf1\x8e\x02\x00\x00")

func templatePostgresDbTmplBytes() ([]byte, error) {
	return bindataRead(
		_templatePostgresDbTmpl,
		"template.postgres.db.tmpl",
	)
}

func templatePostgresDbTmpl() (*asset, error) {
	bytes, err := templatePostgresDbTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.postgres.db.tmpl", size: 654, mode: os.FileMode(420), modTime: time.Unix(1499325993, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateTablesharedTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x58\x4d\x6f\xdb\x38\x10\x3d\x5b\xbf\x62\x0e\xc1\x42\x2e\xb4\x32\xf6\x1a\x20\x87\x34\xde\x14\x01\x8a\x16\xd9\x04\xd8\x43\x90\x03\x2d\x8e\x6c\xa2\x32\x69\x93\x54\x1c\xaf\xa0\xff\xbe\xe0\x87\x14\xc9\xa6\xfc\xd1\x76\xb3\xf5\xc5\x36\x45\xbe\x99\xf7\x66\x86\x43\x6a\x32\x81\xaa\x82\xf4\x93\x78\x24\xb3\x02\xbf\x90\x25\x42\x5d\xdb\xdf\xc0\x14\xcc\x91\xa3\x24\x1a\x29\xcc\xb6\x40\x67\xdf\x98\x8e\xf4\x76\x85\x83\x4b\x94\x96\x65\xa6\xa1\x8a\x46\x54\xb2\x17\x94\x7e\xe2\x67\xb1\x41\xd9\x9d\x3d\xb5\x4f\xa3\x3a\x8a\x26\x13\xb8\xe3\x0a\xa5\x86\x4c\x22\xd1\xa8\x80\x80\xc4\x4c\x48\x0a\x8c\x83\x5e\x84\x6c\x81\x36\x7f\xa2\xbc\xe4\x19\xc4\x7a\xc8\x99\xb1\x07\x8e\x33\xfd\x0a\x99\xe0\x1a\x5f\x75\x7a\xe3\xbe\x13\xa8\x2a\x49\xf8\x1c\xe1\x82\x25\x70\x91\xc1\xe5\x15\xa4\x5f\x04\xbf\x2e\xb5\xb8\x9b\xde\x88\xa2\x5c\x72\x55\xd7\x55\xc5\x72\xb8\x60\x75\x6d\xe6\x23\xa7\x66\xe4\x22\x6b\x08\x19\x63\x75\x0d\x7e\xe8\x71\xbb\x42\xf3\xdc\x4e\x1b\x43\xfc\xc1\xb8\xf5\x60\xf5\xf0\x5e\x25\x80\x52\x0a\x39\x36\xf2\x48\xd4\xa5\xe4\xa0\x53\xa7\x53\xca\x5a\x57\x7f\xa2\x6b\x8d\x33\x5e\xe7\xcf\x82\x50\x20\xa0\x18\x9f\x17\xd8\x88\x9c\x4b\xb1\x3c\x28\x33\xcc\x88\x42\x0a\xc2\x05\x63\xce\x5e\x90\xc3\xba\x44\xb9\x3d\xae\xbf\x31\x18\x56\xdf\x02\x98\x6c\x61\x7c\x9e\x00\x91\x73\x05\x69\x9a\x32\xae\x51\xe6\x24\xc3\xea\x7c\x01\x0b\x6f\xcb\x63\x3b\xd0\x34\x4d\x1b\xf2\x53\x2c\x50\x23\x50\xfb\xa5\x3c\x7b\xf5\x9f\xd2\x77\x26\xbf\x5b\x00\xcb\x35\x44\x95\xb6\xb8\x21\xb2\x55\x05\x2e\x7d\xd2\x3b\x4e\xf1\xf5\x46\x2c\x67\x8c\x13\xcd\x04\x57\x50\xd7\x4d\x1e\x7c\xdc\x56\x55\xea\x13\xd8\x48\xa7\x0e\x27\x86\x65\x74\xb2\x3e\x2f\xa4\x28\x51\xf5\x04\x0a\x01\x74\xb2\xa4\xe3\xce\x50\xb9\xa6\xb7\x25\xcf\xae\xe5\x5c\xbd\x55\x97\x03\x3d\x2b\x45\x76\x0c\x59\xe0\x1b\x52\x14\x1e\xd8\x27\xcb\x2d\xe3\x3d\x85\x72\xc6\xe9\x5b\xce\xbc\x87\x28\x3b\x1e\xc4\x3b\xfc\x87\xe8\xdf\xdb\xb4\x0a\x70\xcf\xf7\xf1\xf6\x69\xbb\x84\xed\x12\xdf\x2d\x97\xf7\xa0\xbe\xe7\xc5\x49\x19\x71\xa4\x5a\x76\xe3\xbe\xc7\xdf\xef\x95\x46\x06\x27\xe2\x5b\x3b\x72\xb5\x9a\x0b\xd9\xca\x70\xa4\x33\x99\x66\xc9\xe8\xf1\x0d\xc2\x1a\x8a\x7d\x34\x0f\xc6\xf1\xb7\xf0\x8c\xca\x71\xbc\x6c\xd9\xd6\x3e\x92\x55\xd5\x99\x5d\xd7\x20\x71\x25\x51\x21\xd7\xb6\xbd\x8a\xcd\xd1\xde\xda\x76\xf9\x9e\xd1\x73\xfb\xfb\xe8\x6d\x33\xf2\x8d\x0b\x4c\x57\x4a\x3f\x09\xef\x97\xfd\xd8\x01\xd7\x3e\xed\x0a\xe4\x14\xfc\xcf\xbd\xc5\xa6\x86\x4f\x05\x70\x52\x3c\x90\x17\x04\x45\x5e\x4c\x28\xf9\x16\xb2\x85\x81\x54\xa0\x85\x15\x40\x8a\x8d\x8f\x13\x0b\x84\x61\x6c\x57\x87\xf2\x6f\x3f\xe1\x58\x93\x70\xca\x2f\x49\xd8\xb8\x8d\x46\x30\xbc\xcc\x04\x63\x29\x28\xcb\x99\xcd\x1a\x97\x67\x64\x4e\x18\x57\xda\x87\xa7\x1b\x9d\x23\xc1\xb9\x6f\x5a\xca\x39\x11\x8a\x46\x9b\x05\x4a\xbc\xef\xb4\xa3\x68\x24\x24\x45\xd9\x68\xfe\xf4\xdc\x1b\x9e\x32\x89\x99\xe9\x26\xf0\xf4\xcc\xb8\x8e\x46\xb6\x77\xb9\x8f\x1d\x69\x1a\x58\x34\x2a\xd8\x92\x69\xf7\xc4\xcc\xf4\x87\x10\x3b\xd8\x46\x61\x81\xe0\xa6\x89\xbc\x4d\xc8\x00\x2b\x27\x8d\x8f\x59\x67\x53\xf1\xb1\x5b\x0f\x95\xd0\xd8\xd9\x8b\x9d\x0d\xc6\xf5\xc1\x62\x5b\xa7\x6e\xde\x95\xf3\xa9\x0d\xed\xba\x49\x25\x21\xf5\xb5\xca\x90\x53\xc6\xe7\x1f\xb7\x40\xa8\xe9\x9b\x1c\x48\x33\x06\x4a\x98\x83\xac\x55\xae\xf1\xb6\x7b\x58\x38\xe0\xe7\x0e\x76\xec\x41\x9c\xf6\x47\xbc\xee\xc5\xeb\x0a\xc8\x6a\x85\x9c\xc6\xfd\xf1\xc4\xbb\x35\x6e\x17\xbc\x45\x72\x77\x49\xfb\x24\x81\x3f\xc6\x41\x15\xa6\x18\x90\x81\xe2\x4f\xd2\xa1\x8b\xfe\xab\x08\xf1\x7b\x40\x89\xbf\x4d\xe9\xf4\x72\x79\xe3\x46\x0a\x52\x2a\x6c\x52\xfa\x44\xe2\x16\x2c\x76\x00\x07\xcf\x85\x07\x15\xe8\x54\xf3\x95\xf3\xc6\x8c\x5a\x9c\x2b\x07\x37\x99\x3c\x7e\x9d\x7e\xbd\x84\x6c\x81\xd9\x37\x60\x39\x90\x42\x22\xa1\x5b\x58\x98\x8d\xd2\x4c\x49\x8c\xdb\xdc\x84\x15\xcc\x4e\x84\x84\x1a\x2a\x0a\x75\xba\xa7\xc0\x2d\x93\x4a\x83\x1b\x74\x0a\xe4\x76\x84\x69\x5c\x42\x2e\x4a\x6e\x2f\x8e\x67\xa8\x60\x01\xc3\x1b\x6e\x1c\x58\x15\x38\xee\xad\x9b\x7d\xd8\x5a\x6c\xf1\x92\x75\xb3\x1b\x3f\x14\x2c\xc3\xd6\x67\x02\xca\xfe\xdf\x30\xbd\x00\x52\x14\xd6\xd9\x25\xd1\xd9\x02\xa9\xa3\x11\x6f\x88\xe4\x8c\xcf\x2f\x21\x23\x1c\x4c\x60\x0b\xa1\x95\x91\x64\x89\x4b\x21\xb7\xe3\x13\x92\xda\x98\x08\x1e\x63\xf0\x75\x85\x99\x46\x6a\x67\x3c\xb0\x7f\xd0\x6d\x52\xf1\xd3\xf3\x77\x90\x6d\xcd\x24\xeb\x04\xf6\x90\x1b\xfe\x7f\x92\x6c\xf1\xbe\xf4\x8d\xc5\xf0\x21\x4e\x62\xa9\xf0\xce\x98\x99\x09\x51\x24\x40\x5c\x1d\x1a\xc4\xc0\xfd\x6f\xdc\x08\xb0\xdb\x7b\xfb\x32\x34\xe6\x12\x58\x77\x2c\x34\xe0\x56\x86\xce\x4b\x8c\x81\xce\x08\x6d\xcd\x19\x3b\x6c\xf8\x4d\xc2\xff\xf8\x22\x21\x1a\x15\x43\x37\xec\x1f\xbb\x60\x47\x23\x3a\x7c\x77\x3d\xf5\xea\x1a\x8d\xd4\xc0\xe1\x29\x31\x86\x2d\xf3\xfe\xe9\x72\x30\xe2\xd1\x68\x32\x51\x19\xe1\xf1\xc9\x0b\x13\x73\xb2\x53\xf0\x41\xad\x8b\xf4\x2f\xb1\x51\x2d\x50\x7f\x57\x18\x20\x37\x98\xc9\x07\x35\xeb\xd7\xe0\x79\xd0\x81\x7a\x3d\x61\x27\xf0\x36\x07\xeb\xeb\x88\xc9\x1f\xa9\xbe\x23\xaf\x19\x46\x81\xcb\x76\x20\x0d\xf6\x2e\xf5\x7b\x97\xda\x2e\xd9\xc0\x25\x76\xe7\x52\x1c\x58\x6e\xb9\x36\x09\x7d\xa6\x47\x9e\xa9\xbb\x19\xd6\xd1\xbf\x01\x00\x00\xff\xff\xf2\x77\x10\x27\x2c\x15\x00\x00")

func templateTablesharedTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateTablesharedTmpl,
		"template.tableShared.tmpl",
	)
}

func templateTablesharedTmpl() (*asset, error) {
	bytes, err := templateTablesharedTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.tableShared.tmpl", size: 5420, mode: os.FileMode(420), modTime: time.Unix(1499326877, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateCassandraTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5b\x6f\xdb\xc8\x15\x7e\x26\x7f\xc5\x59\xc2\x08\xc8\x94\x18\x79\x81\xa2\x0f\x2e\xd4\xc5\x5a\x56\xb6\x06\xdc\x6c\x13\x05\x0d\x8a\x20\x0f\x14\x79\xa4\x0c\x42\x0d\xa5\xe1\x48\xb6\xcb\xf0\xbf\x17\x67\x66\x48\x91\x22\xe9\x8b\x1c\x27\x4d\x5b\x3f\xc4\xe6\x70\x78\xe6\x5c\xbe\xef\x5c\xc8\xa8\xdb\x35\x42\x51\x00\xfb\x2d\xbb\xca\xae\x51\xbe\x8b\xe6\x29\xbe\x8e\x56\x08\x65\x39\x89\xf2\x3c\x12\x89\x8c\x2e\x24\xdf\xa1\x84\x5c\xc9\x6d\xac\xa0\x70\x9d\x64\x0e\x2f\x97\x59\xbc\x49\xd9\x0c\xf3\x9c\x67\xc2\x2d\x5d\x77\xb1\x15\x31\xf8\x09\xbc\x7c\x98\xb8\x00\xb8\xc8\x51\x2a\x3f\x56\x37\x10\x67\x42\xe1\x8d\x62\x13\xf3\x3b\x84\xa2\x90\x91\x58\x22\x9c\xf0\x10\x4e\x62\x38\x1b\x03\x7b\x9d\x89\x5f\xb7\x2a\xbb\xbc\x98\x64\xe9\x76\x25\xf2\xb2\x2c\x0a\xbe\x80\x13\x5e\x96\xb4\x1f\x45\x42\x2b\x27\x71\x75\x36\x1d\x5b\x96\x60\x97\xde\xdd\xae\x91\xee\xeb\x6d\x01\xf8\x5a\xcb\x99\xb6\xc8\xea\x17\x02\x4a\x99\xc9\x80\x0c\xe4\x0b\x20\xb5\xc6\x63\x10\x3c\xa5\x05\x47\x5f\xd6\x7a\x9e\x47\xf1\xe7\xa5\xcc\xb6\x22\xf1\x03\xd7\x29\x5d\xd7\x29\x0a\xe0\x0b\x60\x4d\x0d\xa1\x2c\x5d\x67\x1d\x09\x1e\xfb\x9e\x59\x07\xab\x3a\x88\x4c\x01\x5f\xad\x53\x5c\xa1\x50\x98\xc0\x2d\x2a\xe0\x02\x6a\x17\x79\x81\xeb\x8c\x46\xf9\x26\x25\xcb\x3d\xe3\x28\xe0\x42\x65\x3a\x56\x17\xe7\x4d\xbf\xfa\x4f\xf1\xd5\xc5\xb9\x71\x53\xed\x98\x5d\x94\x6e\x31\x87\x63\x85\x9e\x14\xc5\x09\x87\x2f\xb0\x4e\xb7\x79\x26\x9a\x82\x25\xaa\xad\x14\x5c\x2c\x81\x27\x1e\x59\x17\xab\x9b\x10\x92\x4c\x20\x09\x4f\xb3\xe5\x67\xae\xd8\xef\x6b\x94\x91\xe2\x99\x20\x54\x84\xde\x7a\xc9\xf2\x4d\xea\x85\xd5\xed\x99\x92\x5c\x2c\x7d\x4f\x2f\xe6\x9b\x34\xd0\x6e\x4a\x70\x81\x52\x4b\xf2\xf5\xf5\x2e\x92\x20\xf0\xfa\xf2\x82\x3c\xf6\xa7\x3f\xd2\x12\x4a\x49\xa7\x24\x2c\x99\xb3\x37\x5b\x94\xb7\x6f\xb3\x6b\x8b\x35\x7d\x52\xbe\x49\x2b\x83\x7b\xcc\x24\xeb\xda\xa8\xaa\xac\x62\xb3\x38\x12\xfe\x0b\x7d\x5a\x40\x20\xc0\x34\x47\x0a\x7b\xfc\xe3\x85\xee\x97\x4a\x90\xe7\x3a\x91\x5c\xe6\xf4\xe0\x87\x8f\x5c\x28\x94\x8b\x28\xc6\xa2\x2c\xda\xac\xdc\xc1\xd9\x78\x48\xb0\xa0\x3d\x70\x5a\x96\xa1\x15\x4a\x34\xdc\xf5\xfa\x10\xc8\x5b\xf7\x43\x21\xae\xa8\xc1\xe2\x2e\x22\x50\xfa\x9e\x5e\x8e\x37\x69\xb5\x52\xc4\x9b\xf4\x2c\xde\xa4\x21\x90\x31\x67\xf4\x4f\x49\x78\x69\xa1\xc5\x75\x3a\xc8\xf0\xeb\x67\x18\x63\x01\x9b\xde\x60\xec\x9b\xd0\x92\xb6\x3a\x35\xd0\x33\x3f\xed\x53\x83\x41\x36\x5d\xd6\x6a\x4d\x29\x93\x68\xc5\xc1\x9b\xbc\xb9\x02\x7d\x7d\xb4\xd6\x4d\xb1\x3e\x4a\x19\xd8\x9c\x63\x0f\x7e\xd1\x49\x65\xa4\x55\xa2\xb3\xec\x19\xe8\x9f\x24\x74\x9d\xc1\x14\xe5\x14\x45\x6b\x91\xfd\x96\x99\x08\x9d\x19\x1a\xd1\xb3\x69\x16\x25\x0f\xd8\x56\x14\x80\x22\xa9\xa4\xc2\x00\xa3\x48\xc3\xa2\xf1\xb8\xfe\x39\xa4\xd8\xa3\xc4\x59\xf5\x1e\x27\xb2\x0c\x29\x66\x6e\x2b\x7e\xb4\x70\x4c\x2d\x23\x05\xfa\x2b\xd9\x86\x40\x45\xb5\x93\x8b\xa5\x89\x2a\x30\xc6\x1a\xb4\xfa\xea\xc5\xa8\x4e\x3e\xb3\xe9\xd5\x74\xf2\xae\xaf\x96\x3e\x32\xb7\xc0\x42\x66\xab\x9e\xfc\x05\xd7\x9f\x50\x22\x78\x7f\xd0\x46\x7e\x57\x1e\x73\x85\x2b\x3a\xb5\x87\x0c\x7b\xd2\xde\x45\x74\x9d\xc9\x1f\xe7\xaa\x17\x74\x28\xb3\x0d\x46\x3b\x19\xff\xf9\x30\x49\x58\x0d\xc6\x63\x30\x8d\xd3\x54\xca\xd7\x99\x7a\x45\x51\xd3\xf7\x3b\x28\x74\x28\x92\xdf\x2b\xb7\x68\x77\x32\x93\x42\x60\x0c\x89\xdb\xa0\xdf\x9e\x75\x7a\xd3\x01\xf5\x60\x0c\xd6\x2b\xf5\x92\xdb\x24\x9d\x35\x88\xf6\x1c\xcf\xb6\x04\x53\x54\x78\x34\xdf\x34\xb5\x9e\xc4\x2c\xa3\x40\x45\x8b\x26\x2b\xfe\xb3\x48\x71\x3f\xec\x4d\x7d\xeb\xc0\xd5\x86\xe9\x5b\x42\x6e\x0f\x75\xc2\x84\x01\x45\xed\x18\x62\x67\x51\x34\x88\x5d\x96\x06\x30\x1d\xbc\x74\xe0\x12\x12\xd8\x64\x35\xb0\x5c\x2a\xbb\xb2\x82\x6e\xd6\x0d\x60\x9e\x65\xda\x01\x12\xf3\x6d\xaa\xc8\x73\xf4\xf0\x57\x4e\x0e\xcf\x4f\x2f\xa3\xbe\xeb\x8c\x5e\xda\xf8\xcb\xec\x3a\x37\x56\x04\x77\xb4\x30\x28\xe5\x61\x28\x5a\x7f\xbf\x1c\x1d\x45\xd7\x3c\xda\x0d\x90\x75\x30\x0e\x35\x45\x6b\xf0\x90\x15\x4b\x54\xb3\x68\x87\x07\x40\x98\xbc\xb9\xf2\x49\x50\xe0\x3a\xd4\xeb\xd3\x70\xf5\x89\x8b\x65\x0e\xf1\x27\x72\x69\x62\x78\xbe\x49\x89\xe7\x9e\x77\xd0\xb2\x99\x4e\x6a\x34\x02\xbc\xc1\x78\xab\xf0\xff\x7c\x7d\x70\xfb\x39\x1a\x11\xce\x50\xe9\xe6\x07\x76\x91\xe4\x04\x82\x9c\x59\x78\xeb\x7b\x57\x59\x94\xfc\x23\x92\x39\xc1\xae\x4d\x70\x8d\xa2\xbb\x03\xda\x8b\x0c\xbf\x4a\xed\xad\xd9\x44\x37\x4a\x34\xf8\xe5\x73\x98\xdf\x2a\xcc\xd9\xf9\x76\xb1\x40\xe9\x3a\xf9\x9c\xbd\x97\x5c\x61\x35\x3b\x6e\xd7\x49\xa4\xb0\xaf\x99\x21\x53\x68\xf0\xae\xd0\xb6\x8a\x3e\xa3\xdf\x3a\x25\x84\xd3\x50\x3f\x59\x91\xf4\x0b\xa4\x48\x4d\x34\x04\x6e\x3f\x87\x75\x4c\x8b\xc2\x22\x11\x18\x78\xda\x37\x9e\xfd\x4d\x9e\xf3\x68\x3a\x02\xd3\x22\xa4\x28\x7c\x3a\x3e\xa0\xd8\x9e\x9a\xc6\xe0\xd0\x80\x50\x2b\xa9\xbb\x03\xad\xe9\x18\xa2\xf5\x1a\x45\xa2\x1f\x0c\x3b\xe9\x81\xf6\x1e\x8a\xd0\x25\xcb\xdc\x1e\xff\xa2\xa5\x8d\x46\x07\x7b\x72\x25\xe3\x4c\xec\xd8\xab\x4c\xae\x22\x75\x29\x94\xaf\x87\x69\xbf\xd6\x30\x08\xe1\xe7\x53\x9b\xba\xf7\x09\xc8\x6d\x5b\x31\xae\xac\xb0\xb1\xf7\x3c\x83\xac\x1a\x40\xa6\x56\xc6\x69\xb4\xcd\xb1\x1b\x2b\x7b\xbb\x76\x6c\x23\xf3\xfe\x5d\xf2\x55\x24\x6f\x2f\x45\x82\x37\xac\x39\x57\xf0\x05\x2c\x95\x9d\x3e\x01\x22\x6a\xaf\xf6\x23\x68\xdc\xb0\xbb\x56\xda\x0b\x1a\xb1\xbb\xff\x08\xf7\x2e\xb7\x37\xb2\x7d\xd0\xf4\x8a\xb5\x3f\x9f\x57\xef\x30\x02\xeb\x88\x3a\x9f\x72\x5d\xcd\x9a\x34\x08\xe0\x80\x42\xc5\x40\x9d\xe8\x2b\x12\x43\x15\xe2\x98\xfc\xad\x1b\x99\x57\x5c\xe6\x03\x2f\xeb\x4c\xcb\xd5\x25\xab\xce\x5f\xf7\x8e\x37\xb6\xa7\x4a\x98\x16\x43\xdc\xd7\x7f\x04\xdf\x24\x13\xeb\xa3\xd8\xd7\x1e\x2a\xf6\x52\xff\x37\x47\x8b\xa6\x57\x7f\xc8\x01\x43\x1b\x30\x4b\x79\x7c\xe7\x90\x31\x80\xf8\x10\xf0\x66\x8d\xb1\xc2\x44\x4b\x98\xf1\x7f\x21\x70\xa1\x02\xf0\x3f\x7c\xfc\x91\xa9\xf0\x10\xa8\x53\x7b\x6d\x6a\x7d\xd5\x3f\xdb\x2a\xda\x67\xf8\x69\x8f\xa7\x02\xd7\x59\x98\xce\xef\x1e\xf6\x11\xec\x9f\xa1\x37\x37\x8c\xe9\xa0\xd3\x79\x1a\x3e\xdb\xaf\xb2\x2a\xef\xd4\x25\xc4\x5c\x9b\x22\xa2\x6b\x3b\xa6\x39\x6a\x45\xe6\x12\xa3\xcf\x86\xb0\xad\x8c\xa3\x2d\x9f\xa4\x59\x8e\xc3\xcd\xe0\x77\x62\x76\x6b\x04\x79\x22\x05\xa7\x51\xfc\xe9\x28\x06\x4a\xdc\xe6\x78\x49\x00\xa2\x89\x2e\x84\x28\x26\xa2\x00\x69\xd1\x53\x8e\x82\x8a\x83\xcd\xb1\xe3\xbf\x84\x89\xd4\x14\x0f\x34\xd3\x0d\xaa\x2d\xcc\x1e\xfb\x26\xe4\xcb\x17\xf8\x69\xef\xc1\x9a\x11\x30\xc8\xc5\x1e\xc2\x50\xd7\xf3\xac\x1c\xfd\x9a\x84\xdc\x13\xcb\x00\xc5\xcc\x93\x1d\x62\x69\x3b\x1b\xbc\xd3\x4b\xcd\xd9\xd9\x54\xd6\x3e\xfa\x1e\xc1\xdf\x6f\xcf\xdd\xde\x19\xed\xd1\xa4\xad\xd9\x32\xdc\x12\x9a\x19\x6e\x68\x66\xeb\x0e\x02\x33\x4c\x31\x56\xcf\xf8\x26\xdb\xb3\xe3\xb7\xf1\x91\x1e\x3b\xb4\xaa\x14\x16\xfb\xce\xa0\x33\x9c\xbc\xff\xeb\xf4\xed\xd4\x0c\x63\x07\xf7\x0e\xa5\x04\x55\xf4\x69\x32\x32\x37\x33\x99\xa0\xb4\xca\x07\xf0\x17\x3b\x26\x75\xce\xf8\xfd\xed\xc5\xf4\x2d\x9c\xff\xd3\x1c\x43\x74\xe5\x21\xc4\x99\x4e\x4e\xc6\x17\x5d\x71\x96\xb0\x0b\xe0\xb5\xdc\xc1\x29\x52\xe3\xf5\xf0\x66\x9c\xa5\x81\x15\xd1\x90\x7e\xc1\x25\x6a\x72\x7c\xe0\x1f\x29\x51\xfc\x3c\x20\x19\x7e\x9d\x4d\xac\xec\x9a\x07\xdd\x4d\x17\xd3\x7a\x57\x8b\x1f\xe6\xc0\x94\xaf\xb8\x1a\xf6\xca\xd5\xe5\xdf\x2e\xdf\xf5\x7a\x7e\x68\x6c\x6d\x88\x6d\x0c\xae\x7d\x73\x19\xe1\x7e\x9f\x5a\xf4\xf0\x37\xc9\x56\x73\x2e\x74\x82\xd7\x03\x60\x8b\x16\x1a\x45\x0f\xfe\x46\x74\x7e\x5b\x14\xcc\xbe\xbf\x1c\xf8\x8f\x0f\xec\xd5\x56\xc4\xbf\x12\x4b\xeb\x4f\x43\xe6\x8c\xc1\xb6\xd1\x1a\x91\xb0\xea\x2b\x54\xe8\x3d\x88\x29\xcd\xe9\xb8\x33\x1c\xeb\x55\x4f\x2b\x34\x89\xd2\xd4\x2a\xd4\xc9\x0a\x0f\x37\x7f\xc1\x45\xcb\xfc\x03\x4b\x87\x0c\x35\x34\x2c\x5c\x67\x03\x67\xe3\x17\x77\x6d\x2a\xaa\x4f\x9e\x49\xe9\x3a\x1b\xf6\x9e\xe8\xe7\x3f\x9f\x27\x2a\xb7\x6f\x9e\xe0\x13\xf3\x1d\xe1\xb1\xa0\xa8\xbb\x94\x3a\xf0\xfb\x0f\x22\xcf\x1a\xfa\xea\x23\xf8\xbf\x03\x00\x00\xff\xff\x12\xed\x7b\x4d\x36\x24\x00\x00")

func templateCassandraTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateCassandraTmpl,
		"template.cassandra.tmpl",
	)
}

func templateCassandraTmpl() (*asset, error) {
	bytes, err := templateCassandraTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.cassandra.tmpl", size: 9270, mode: os.FileMode(420), modTime: time.Unix(1499328184, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templateCassandraDbTmpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x51\x6f\xdb\x36\x10\x7e\x96\x7e\xc5\x4d\xc8\x56\x29\x15\x88\x3c\x37\x70\x8b\xc6\x49\x87\x00\x41\x8a\x34\xc1\xf6\x90\x05\x03\x45\x9d\x1c\xa6\x32\xe9\x90\x94\xe3\x40\xd0\x7f\x1f\x8e\xa2\x6c\x39\x76\xdd\x61\x7b\x92\x75\xe2\x7d\xf7\xdd\x77\xc7\x3b\xbb\xd7\x05\x82\xe0\xd6\x72\x55\x1a\x7e\xc6\x9d\x78\x04\xeb\x4c\x23\x1c\xb4\x71\x54\x16\x70\x3c\xd3\xe2\xb9\x66\xb7\x68\xad\xd4\x2a\x8e\xc4\x73\xdd\x9f\x0a\x1f\xfa\x97\x38\xb2\x7c\x89\x5f\x8b\x27\x14\xce\xc2\xfd\x43\xad\x79\xf9\x07\x37\xdf\xd0\xa2\xe3\x45\x8d\x71\x17\xc7\x55\xa3\x04\xa4\x05\x1c\x6f\x87\xcb\xe0\xd6\x19\xa9\x66\x69\x46\x81\xa5\x9a\xb5\x71\xb4\xe4\x06\x8a\xa6\x82\xe2\xd5\xa1\x65\x67\x4d\x55\xa1\x81\x38\xaa\xb4\x01\x99\x83\x75\x73\x07\x1f\x26\x60\xb8\x9a\x21\x14\x6c\xa0\xc4\x2e\x94\x33\x12\x2d\x31\x8f\x64\x05\x12\x3e\xc2\x09\xfd\x8e\x8a\xa6\x62\x7f\x1a\xe9\x30\x84\x4a\x4e\xff\x52\x49\x16\x47\x51\x17\x47\x94\x51\x30\xff\x56\x34\x55\x0f\xcf\x6e\xdd\xdc\x85\x9f\x9f\xcd\xcc\x66\x31\x1d\x35\xe8\x1a\xa3\x88\x19\x1b\x38\x1f\x4c\xec\x62\x85\xa2\x71\x98\x0a\xb7\x02\xa1\x95\xc3\x95\x63\xd3\xfe\x99\x01\x1a\xa3\x0d\x51\x95\x15\xd4\xa8\xd2\xdd\x3c\xb2\x8f\x27\x3e\x15\xe1\x56\x39\x94\x5a\x21\x25\x5d\xeb\xd9\x77\xe9\xd8\xd7\x05\x1a\xee\xa4\x56\x04\x9e\x27\xeb\xc8\x04\x92\xe4\xc3\xa9\x9e\x25\x9a\x34\xf1\xe6\x22\xa3\x9c\x4b\x24\x35\x09\x2f\xa5\xd7\x51\xdc\x73\xac\x78\x53\xbb\x3b\x39\x47\xeb\xf8\x7c\x91\x3a\xd3\x60\xd6\x8b\x89\xc6\x50\xf8\x82\x95\x05\x0b\x79\x79\xa7\x11\xef\xec\xd4\x9f\xfa\x65\x02\x4a\xd6\x9e\xf9\xa0\x58\xa0\x73\x41\x29\x7b\xc2\x90\x4c\x6f\xae\xc0\xbf\x27\xf9\xe6\x6b\x8a\xc6\x64\x87\xd9\x53\xc5\xa8\x0f\xfe\xce\x41\x17\x4f\xe3\x36\x18\x77\xa0\x0f\xae\x8b\x27\x66\xa8\x03\xaf\xfa\x6e\xb4\x69\x00\xd8\x94\x52\xc9\x9a\x2a\xd8\xb6\x3d\xc8\x11\xbb\x15\x8f\x38\xe7\xec\x8e\x9a\xd6\x76\xdd\x81\xa6\xe5\x4b\x6c\x5b\xe2\xd8\x08\x77\xcd\xe7\xd8\x75\x69\xdb\xb2\x2b\xfd\x82\x66\x6c\x84\xe3\x37\xa7\xb2\xd6\x5f\xa2\x1c\xb8\x99\x59\xe2\x3f\x43\xb7\x07\x6c\x7a\x73\xb5\x17\x2f\xf3\x0d\x23\x9e\x6b\xd2\x39\x49\x7c\xa6\xa3\x12\xde\x34\x68\x5e\xd3\x35\x3e\x63\xac\xaf\xf1\x58\x9c\x09\xf0\xc5\x02\x55\x99\x6e\x99\x73\xf8\x41\xb8\xee\x60\x8f\x5f\x2a\x8b\xc6\xed\x2a\x11\x04\x95\x39\x1c\x09\xca\x92\x5d\x6b\xf5\xb9\x71\xfa\xf2\x7c\xaa\xeb\x66\xae\x6c\xd7\xb5\xad\xac\xe0\x48\x76\x1d\x85\x46\x55\x92\xe5\x48\xb0\xdf\xb5\x67\x11\xe4\x0b\xa6\xbb\xd7\x05\xd2\x77\x7f\x8c\x24\xdc\xc9\x39\x91\x9e\x09\x48\xe5\x34\xb4\x2d\xb0\xf3\x33\x5f\x45\xc2\x81\xff\x49\xe9\xfc\xac\x67\x33\xc4\x87\x25\xaf\x1b\xb4\xf0\x5f\x41\x3f\x0d\x40\xc9\x16\xc0\x12\x3e\x4c\xf6\xf8\x93\xdb\xd1\x72\x5b\x97\x01\x20\xee\xe2\xb6\x0d\x57\x80\x5d\xaa\x12\x57\x53\x3d\x2f\xa4\xf2\xb3\xc1\xc2\xa1\x0e\x3e\xc7\x1a\x1d\xb5\x9d\x97\x69\xab\x7e\x67\xaf\x6d\xcb\x36\x4d\xfd\xa5\x51\x82\xa6\x20\x65\xbe\x57\xfa\xd2\x43\x41\x65\xf4\x1c\xd6\x80\x23\xfd\xbb\x0e\x5e\x1e\xd1\x20\xec\xd1\x6b\x57\x26\xe0\xaa\xdc\x2b\xff\x64\xd0\x2d\xf1\xcd\x3a\xe5\x75\x1d\x68\x79\x19\x82\x83\x7f\xc4\x71\xbf\xd9\x86\xd9\x8e\x66\xb4\xd6\xe8\xf6\xf4\xbb\x26\x8e\xfc\x2d\xbc\x7f\x90\xca\xa1\xa9\xb8\xc0\x76\xd4\xee\x62\xec\xbf\xb3\xa7\xbc\x14\x7e\x26\xfa\x2d\x75\x8d\x2f\xfd\xa2\x4a\x95\xac\xb3\x78\xb4\x56\x8a\x1c\x04\xf3\x57\x52\x30\xde\x2f\x93\x61\x93\xec\xee\x91\x91\x1b\x1c\x8f\xf7\x5f\x0e\x1b\xda\x61\x78\x6c\xd1\xf6\xa5\x91\xc4\xe7\x24\x1e\x26\xa4\xd9\xcc\x47\x72\x0e\x7b\xd1\xc0\x64\x02\xef\x3e\xbd\xeb\xa7\x24\x37\x33\x3a\x45\x80\xf7\xf2\x81\x2c\xf2\xfd\x7b\xff\xa8\xc0\xe6\xa0\xbf\x87\xaf\x2c\xed\x63\x67\xa7\x64\xf3\xae\x51\xb1\xb5\x55\x29\xb1\x28\xea\x00\x6b\x8b\xb0\xe3\x5d\xcd\x37\x13\xfd\x00\xc6\x5a\x91\x37\x60\xdc\x98\x2d\xb8\xfb\x07\x12\xe7\xc7\x40\xc9\xc9\xca\x6f\xf8\xb7\xf6\x47\x5c\xb1\x0b\x25\x74\x89\x77\x3a\x98\xb8\x31\x3f\x8f\xf6\xd3\x78\xf7\x21\x5c\xff\x27\x65\xc9\xeb\x8d\xf6\xdc\x98\xe0\xb3\xfd\xb7\x64\x17\x24\x0f\x20\x7e\xcd\xfd\x1b\xee\x4b\x5e\xf7\xdc\x83\xc7\x1b\xbc\x87\x64\x9c\x58\x1f\x94\x0a\xf1\x65\x61\xa4\x72\x15\xb5\x66\xf2\xeb\x32\xf1\xfd\xd4\x9f\x8c\xb7\x4f\x07\xbc\x6f\x8d\xc2\xd4\xac\xd7\x67\xf7\x4f\x00\x00\x00\xff\xff\xfc\x40\x1b\x11\x37\x0a\x00\x00")

func templateCassandraDbTmplBytes() ([]byte, error) {
	return bindataRead(
		_templateCassandraDbTmpl,
		"template.cassandra.db.tmpl",
	)
}

func templateCassandraDbTmpl() (*asset, error) {
	bytes, err := templateCassandraDbTmplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "template.cassandra.db.tmpl", size: 2615, mode: os.FileMode(420), modTime: time.Unix(1498978961, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"template.db.tmpl": templateDbTmpl,
	"template.loader.tmpl": templateLoaderTmpl,
	"template.postgres.tmpl": templatePostgresTmpl,
	"template.postgres.db.tmpl": templatePostgresDbTmpl,
	"template.tableShared.tmpl": templateTablesharedTmpl,
	"template.cassandra.tmpl": templateCassandraTmpl,
	"template.cassandra.db.tmpl": templateCassandraDbTmpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"template.cassandra.db.tmpl": &bintree{templateCassandraDbTmpl, map[string]*bintree{}},
	"template.cassandra.tmpl": &bintree{templateCassandraTmpl, map[string]*bintree{}},
	"template.db.tmpl": &bintree{templateDbTmpl, map[string]*bintree{}},
	"template.loader.tmpl": &bintree{templateLoaderTmpl, map[string]*bintree{}},
	"template.postgres.db.tmpl": &bintree{templatePostgresDbTmpl, map[string]*bintree{}},
	"template.postgres.tmpl": &bintree{templatePostgresTmpl, map[string]*bintree{}},
	"template.tableShared.tmpl": &bintree{templateTablesharedTmpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

